<?php


namespace rapidPHP\library\core\server;


use rapidPHP\library\core\server\response\SWebSocketResponse;
use ReflectionException;
use Swoole\Http\Request as SwooleRequest;
use Swoole\WebSocket\Frame;
use Swoole\WebSocket\Server;

abstract class SWebSocketServer extends SwooleServer
{

    /**
     * SWebSocketServer constructor.
     * @param string $ip
     * @param int $port
     * @param string $sessionKey
     * @param array $options
     */
    public function __construct(string $ip = self::DEFAULT_IP, int $port = 9502, string $sessionKey = self::DEFAULT_SESSIONKEY, array $options = [])
    {
        $options = array_merge([
            //心跳检测 每隔多少秒，遍历一遍所有的连接
            'heartbeat_check_interval' => 30,

            //心跳检测 最大闲置时间，超时触发close并关闭  默认为heartbeat_check_interval的2倍，两倍是容错机制，多一点是网络延迟的弥补
            'heartbeat_idle_time' => 60,
        ], $options);

        parent::__construct(Server::class, $ip, $port, $sessionKey, $options);
    }

    /**
     * 开启web服务，只能调用一次
     * @return SWebSocketServer
     */
    public function start()
    {
        $this->on("open", [$this, 'onOpen']);

        $this->on('message', [$this, 'onMessage']);

        $this->on('close', [$this, 'onClose']);

        return parent::start();
    }

    /**
     * Server开启
     * @param Server $server
     */
    public function onStart($server)
    {
        $host = $server->host;

        if ($host === '0.0.0.0') $host = '127.0.0.1';

        if ($server->port != 80) $host .= ':' . $server->port;

        $mode = $this->isHttps() ? 'ws' : 'wss';

        echo "http server is started at {$mode}://{$host}\n";

        parent::onStart($server);

        // TODO: Change the autogenerated stub
    }

    /**
     * 获取客户端sessionId
     * @param Server $server
     * @param SwooleRequest $req
     * @return mixed|string|null
     */
    private function getClientSessionId(Server $server, SwooleRequest $req)
    {
        $sessionId = B()->getData($req->cookie, parent::getSessionKey());

        if (strlen($sessionId) != 32) $sessionId = null;

        if (is_null($sessionId)) {
            $sessionId = md5(uniqid(mt_rand(), true));

            $setCookie = SWebSocketResponse::getCookieString(parent::getSessionKey(), $sessionId, 0, '/');

            if ($server->push($req->fd, $setCookie)) {
                return $sessionId;
            } else {
                return null;
            }
        }

        return $sessionId;
    }

    /**
     * @param Server $server
     * @param SwooleRequest $req
     */
    public function onOpen(Server $server, SwooleRequest $req)
    {
        $req->cookie[parent::getSessionKey()] = $this->getClientSessionId($server, $req);
    }

    /**
     * 收到消息
     * @param Server $server
     * @param Frame $frame
     */
    public function onMessage(Server $server, Frame $frame)
    {
        // TODO: Change the autogenerated stub
    }

    /**
     * 关闭
     * @param Server $server
     * @param $fd
     */
    public function onClose(Server $server, $fd)
    {
        // TODO: Change the autogenerated stub
    }
}